#define _CRT_SECURE_NO_WARNINGS

#define pi 3.141592
#define e 2.718281

#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<conio.h>
#include<string.h>
#include<ctype.h>

void save(const char* operation, float result);
void show(void);
void reset(void);
double applyOperation(double, double, char);
double evaluateExpression(const char*);
void applications(void);

int main() {
    int choice;
    printf("Choose an option:\n1. Hints\n2. Calculator\n3. Show History\n4. Reset History\n5. Exit\n");

    while (1) {
        scanf("%d", &choice);
        getchar();

        switch (choice) {
        case 1:
            printf("Hints are not implemented yet.\n");
            break;
        case 2:
            applications();
            break;
        case 3:
            show();
            break;
        case 4:
            reset();
            break;
        case 5:
            printf("Exiting...\n");
            exit(1);
        default:
            printf("Invalid number!\n");
        }
    }
    return 0;
}

void save(const char* operation, float result) {
    FILE* fp;
    fp = fopen("data_saver.txt", "a");
    if (fp == NULL) return;
    fprintf(fp, "%s = %.2f\n", operation, result);
    fclose(fp);
}

void show(void) {
    FILE* fp;
    char line[200];
    int index = 1;
    fp = fopen("data_saver.txt", "r");
    if (fp == NULL) {
        printf("Nothing in history\n");
        return;
    }
    while (fgets(line, sizeof(line), fp) != NULL) {
        printf("#%d: %s", index++, line);
    }
    fclose(fp);
}

void reset(void) {
    FILE* fp;
    fp = fopen("data_saver.txt", "w");
    fclose(fp);
    printf("The history has been cleared\n");
}

double applyOperation(double a, double b, char op) {
    if (op == '+') return a + b;
    if (op == '-') return a - b;
    if (op == '*') return a * b;
    if (op == '/') return b != 0 ? a / b : 0;
    return 0;
}

double evaluateExpression(const char* expression) {
    double numbers[100];
    char operators[100];
    int numIndex = 0, opIndex = 0;
    int i = 0;

    while (expression[i] != '\0') {
        if (isspace(expression[i])) {
            i++;
            continue;
        }
        if (isdigit(expression[i]) || expression[i] == '.') {
            double value = 0;
            double fraction = 1;
            while (isdigit(expression[i]) || expression[i] == '.') {
                if (expression[i] == '.') {
                    fraction = 0.1;
                    i++;
                    continue;
                }
                if (fraction == 1) {
                    value = value * 10 + (expression[i] - '0');
                } else {
                    value += (expression[i] - '0') * fraction;
                    fraction *= 0.1;
                }
                i++;
            }
            numbers[numIndex++] = value;
        } else if (strncmp(&expression[i], "pi", 2) == 0) {
            numbers[numIndex++] = pi;
            i += 2;
        } else if (strncmp(&expression[i], "e", 1) == 0) {
            numbers[numIndex++] = e;
            i += 1;
        } else if (expression[i] == '(') {
            int start = ++i;
            int parenthesisCount = 1;
            while (parenthesisCount > 0 && expression[i] != '\0') {
                if (expression[i] == '(') parenthesisCount++;
                else if (expression[i] == ')') parenthesisCount--;
                i++;
            }
            if (parenthesisCount != 0) {
                printf("Unbalanced parentheses!\n");
                return 0;
            }
            char subExpr[100];
            strncpy(subExpr, &expression[start], i - start - 1);
            subExpr[i - start - 1] = '\0';
            numbers[numIndex++] = evaluateExpression(subExpr);
        } else if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*' || expression[i] == '/') {
            while (opIndex > 0 && (
                (operators[opIndex - 1] == '*' || operators[opIndex - 1] == '/') ||
                ((operators[opIndex - 1] == '+' || operators[opIndex - 1] == '-') && (expression[i] == '+' || expression[i] == '-')))) {
                numbers[numIndex - 2] = applyOperation(numbers[numIndex - 2], numbers[numIndex - 1], operators[--opIndex]);
                numIndex--;
            }
            operators[opIndex++] = expression[i];
            i++;
        } else {
            printf("Invalid character: %c\n", expression[i]);
            return 0;
        }
    }

    while (opIndex > 0) {
        numbers[numIndex - 2] = applyOperation(numbers[numIndex - 2], numbers[numIndex - 1], operators[--opIndex]);
        numIndex--;
    }
    return numbers[0];
}

void applications() {
    char expression[100];
    double result;

    while (1) {
        printf("Enter a calculation: ");
        fgets(expression, sizeof(expression), stdin);

        for (int i = 0; expression[i] != '\0'; i++) {
            if (expression[i] == '\n') {
                expression[i] = '\0';
                break;
            }
        }

        if (expression[0] == 'n' || expression[0] == 'N') {
            printf("Now returning to the menu...\n");
            return;
        } else if (expression[0] == 'c' || expression[0] == 'C') {
            reset();
        } else if (expression[0] == '#' || expression[strlen(expression) - 1] == '#') {
            int index;
            if (expression[0] == '#') {
                sscanf(&expression[1], "%d", &index);
            } else {
                sscanf(expression, "%d#", &index);
            }

            FILE* fp = fopen("data_saver.txt", "r");
            if (fp == NULL) {
                printf("Nothing in history\n");
                continue;
            }

            char line[200];
            int currentIndex = 1;
            int found = 0;

            while (fgets(line, sizeof(line), fp) != NULL) {
                if (currentIndex == index) {
                    found = 1;
                    char* equalSign = strchr(line, '=');
                    if (equalSign != NULL) {
                        equalSign[-1] = '\0';
                        printf("Using history #%d: %s\n", index, line);
                        strcpy(expression, line);
                    }
                    break;
                }
                currentIndex++;
            }
            fclose(fp);

            if (!found) {
                printf("Invalid history number!\n");
                continue;
            }
        }

        result = evaluateExpression(expression);
        printf("Result: %.2lf\n", result);
        save(expression, (float)result);
    }
}
